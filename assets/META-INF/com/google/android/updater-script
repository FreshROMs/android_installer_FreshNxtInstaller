
# =========================================
#         _____              _      
#        |  ___| __ ___  ___| |__   
#        | |_ | '__/ _ \/ __| '_ \  
#        |  _|| | |  __/\__ \ | | | 
#        |_|  |_|  \___||___/_| |_| 
#                              
# =========================================
# FreshNxt - ROM install script
# (C) 2020-2022 John Vincent - TenSeventy7@XDA
# This is licensed under GPLv3
#

# Extract the tools folder
ifelse(
      is_mounted("/cache"),
      sleep(1),
      mount("ext4", "EMMC", "/dev/block/platform/13520000.ufs/by-name/cache", "/cache")
);
package_extract_dir("META-INF/com/google/android/install-wizard/tools", "/cache/tools");
package_extract_dir("META-INF/cf/tenseventyseven/fresh", "/cache/fresh");
set_metadata_recursive("/cache/tools", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0755);

ui_print("- Scanning for device partitions");
run_program("/cache/tools/fresh-tk", "mounts_checker");
ifelse(
  file_getprop("/tmp/toolkit.prop", "boot.part.by-name") == "fail", (
    ui_print("   - Error 02: Failed to scan for partitions.");
    ui_print("     Please update your recovery.");
    sleep(5);
    abort(" ");
   )
);

# Extract ROM prop files
package_extract_file("fresh.prop", "/tmp/fresh.prop");
package_extract_file("build.prop", "/tmp/build.prop");

# HACK: Actually check if we found the following partitions soon.
ui_print("  - Found operating system partition");
sleep(1);
ui_print("  - Found device vendor partition");
sleep(1);
ui_print("  - Found OEM product partition");
sleep(1);
ui_print("  - Found OEM splash screen partition");
sleep(1);
ui_print("  - Found Linux kernel partition");
sleep(1);
ui_print("  - Found device tree overlay partition");
sleep(1);
ui_print("  - Found recovery environment partition");
sleep(3);

# Prepare partitions for pre-install services
ifelse(is_mounted(file_getprop("/tmp/toolkit.prop", "block.system.mount")), sleep(1), mount("ext4", "EMMC", file_getprop("/tmp/toolkit.prop", "block.system"), file_getprop("/tmp/toolkit.prop", "block.system.mount")));
ifelse(is_mounted("/product"), sleep(1), mount("ext4", "EMMC", file_getprop("/tmp/toolkit.prop", "block.product"), "/product"));
ifelse(is_mounted("/vendor"), sleep(1), mount("ext4", "EMMC", file_getprop("/tmp/toolkit.prop", "block.vendor"), "/vendor"));
ifelse(is_mounted("/data"), sleep(1), run_program("/cache/tools/busybox", "mount", "/data"));

show_progress(0.100000, 0);

ifelse(
  file_getprop("/tmp/toolkit.prop", "system.exist.data") == "true", (
    ui_print("   - Existing data detected.");
    ui_print("     Backing up your current OMC to prevent bootloops.");
    run_program("/cache/tools/fresh-tk", "optics", "backup");
    run_program("/cache/tools/fresh-tk", "disable_modules");
    ui_print(" ");
   )
);

ifelse(
  file_getprop("/tmp/toolkit.prop", "magisk.installed.props") == "true", (
    ui_print("   - A Magisk module has been detected that replaces");
    ui_print("     your system's build fingerprint. This module has");
    ui_print("     been disabled to allow the system to update.");
    ui_print(" ");
    ui_print("     Enable the module again, then reboot, after");
    ui_print("     booting.");
    sleep(5);
    ui_print(" ");
   )
);

show_progress(0.150000, 0);

# Unmount system, vendor, and product/odm partitions for flashing
ui_print("   - Unmounting partitions.");
ifelse(is_mounted(file_getprop("/tmp/toolkit.prop", "block.system.mount")), unmount(file_getprop("/tmp/toolkit.prop", "block.system.mount")));
ifelse(is_mounted("/product"), unmount("/product"));
ifelse(is_mounted("/vendor"), unmount("/vendor"));

sleep(3);
show_progress(0.200000, 0);

# Flash system partition
ui_print("- Installing Fresh " +  file_getprop("/tmp/fresh.prop", "ro.fresh.version") + file_getprop("/tmp/fresh.prop", "ro.fresh.build.state") + " for the " + file_getprop("/tmp/build.prop", "ro.product.system.device") + ".");
ui_print("  This might take a while.");

ifelse(
  file_getprop("/tmp/toolkit.prop", "block.dynamic.mount") == "true", (
    ui_print("   - Flashing super image.");
    package_extract_file("FRSH/super.img", file_getprop("/tmp/toolkit.prop", "block.super"));
  ), (
    ui_print("   - Flashing system image.");
    block_image_update("/dev/block/platform/13520000.ufs/by-name/system", package_extract_file("system.transfer.list"), "system.new.dat.br", "system.patch.dat") || abort("      - Failed to update system image!");
    show_progress(0.300000, 0);

    ui_print("   - Flashing vendor image.");
    block_image_update("/dev/block/platform/13520000.ufs/by-name/vendor", package_extract_file("vendor.transfer.list"), "vendor.new.dat.br", "vendor.patch.dat") || abort("      - Failed to update vendor image!");
    show_progress(0.600000, 0);
    
    ui_print("   - Flashing product image.");
    block_image_update("/dev/block/platform/13520000.ufs/by-name/product", package_extract_file("product.transfer.list"), "product.new.dat.br", "product.patch.dat") || abort("      - Failed to update product image!");
    show_progress(0.700000, 0);
    
  )
);

# Flash up_param partition
ui_print("   - Flashing custom splash screen.");
package_extract_file("up_param.bin", file_getprop("/tmp/toolkit.prop", "block.splash"));

# Flash boot/recovery/DTB
ui_print("   - Flashing Mint Kernel.");
package_extract_file("boot.img", file_getprop("/tmp/toolkit.prop", "block.boot"));
ui_print("   - Flashing device tree blob image.");
package_extract_file("dtb.img", "/dev/block/platform/13520000.ufs/by-name/dtb");
ui_print("   - Installing TWRP recovery.");
package_extract_file("recovery.img", file_getprop("/tmp/toolkit.prop", "block.recovery"));

show_progress(0.800000, 0);

ui_print("   - Fresh installed successfully!");
sleep(3);
ui_print(" ");

# Post-install services
ui_print("- Installing selected addons from setup");
ui_print("   - Re-mounting partitions.");
mount("ext4", "EMMC", file_getprop("/tmp/toolkit.prop", "block.system"), file_getprop("/tmp/toolkit.prop", "block.system.mount"));
mount("ext4", "EMMC", file_getprop("/tmp/toolkit.prop", "block.vendor"), "/vendor");
mount("ext4", "EMMC", file_getprop("/tmp/toolkit.prop", "block.product"), "/product");

# Google
ifelse(
  file_getprop("/tmp/install-wizard/google.prop", "selected.0") == "1", (
      ui_print("   - Installing Full Google apps");
      sleep(10);
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/google.prop", "selected.0") == "2", (
      ui_print("   - Installing Micro Google apps");
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.google.Full");
      sleep(5);
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/google.prop", "selected.0") == "3", (
      ui_print("   - Installing Lite Google apps");
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.google.Full");
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.google.Micro");
      sleep(3);
  )
);

# Bixby
ifelse(
  file_getprop("/tmp/install-wizard/bixby.prop", "item.0.1") == "1", (
      ui_print("   - Installing Bixby Voice");
      sleep(5);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.bixby.Voice");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/bixby.prop", "item.0.2") == "1", (
      ui_print("   - Installing Bixby Vision");
      sleep(3);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.bixby.Vision");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/bixby.prop", "item.0.3") == "1", (
      ui_print("   - Installing Bixby Reminders");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.bixby.Reminders");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/bixby.prop", "item.0.4") == "1", (
      ui_print("   - Installing Bixby Routines");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.bixby.Routines");
  )
);

# Seamless
ifelse(
  file_getprop("/tmp/install-wizard/seamless.prop", "item.0.1") == "1", (
      ui_print("   - Installing Quick Share");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.seamless.ShareLive");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/seamless.prop", "item.0.2") == "1", (
      ui_print("   - Installing Link to Windows");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.seamless.PhoneLink");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/seamless.prop", "item.0.3") == "1", (
      ui_print("   - Installing Call and Text Sync");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.seamless.MdecService");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/seamless.prop", "item.0.4") == "1", (
      ui_print("   - Installing Samsung Friends");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.seamless.Friends");
  )
);

# AR Zone
ifelse(
  file_getprop("/tmp/install-wizard/ar-zone.prop", "item.0.1") == "1", (
      ui_print("   - Installing AR Zone");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.ar.Zone");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/ar-zone.prop", "item.0.2") == "1", (
      ui_print("   - Installing AR Emoji");
      sleep(5);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.ar.Emoji");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/ar-zone.prop", "item.0.3") == "1", (
      ui_print("   - Installing AR Doodle");
      sleep(3);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.ar.Doodle");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/ar-zone.prop", "item.0.4") == "1", (
      ui_print("   - Installing DECO PIC");
      sleep(3);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.ar.DecoPic");
  )
);

# Game Launcher
ifelse(
  file_getprop("/tmp/install-wizard/game-home.prop", "item.0.1") == "1", (
      ui_print("   - Installing Game Launcher and Tools");
      sleep(5);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.GameTools");
  )
);

# Security
ifelse(
  file_getprop("/tmp/install-wizard/security.prop", "item.0.1") == "1", (
      ui_print("   - Installing Malware Protection");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.security.Antivirus");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/security.prop", "item.0.2") == "1", (
      ui_print("   - Installing Secure Folder");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.security.SecureFolder");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/security.prop", "item.0.3") == "1", (
      ui_print("   - Installing Private Share");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.security.PrivateShare");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/security.prop", "item.0.4") == "1", (
      ui_print("   - Installing Samsung Checkout");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.security.Checkout");
  )
);

# SEC
ifelse(
  file_getprop("/tmp/install-wizard/extras.prop", "item.0.1") == "1", (
      ui_print("   - Installing Dictionary");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.extras.Dictionary");
  )
);

ifelse(
  file_getprop("/tmp/install-wizard/extras.prop", "item.0.2") == "1", (
      ui_print("   - Installing Smart Touch Call");
      sleep(2);
  ), (
      run_program("/cache/tools/fresh-tk", "addon_remove", "cf.tenseventyseven.fresh.extras.STC");
  )
);

# Copy installer selections to the system
run_program("/cache/tools/fresh-tk", "install_selections");
show_progress(0.900000, 0);

ui_print("   - Unmounting partitions.");
ifelse(is_mounted(file_getprop("/cache/fresh-tk_install", "block.system.mount")), unmount(file_getprop("/cache/fresh-tk_install", "block.system.mount")));
ifelse(is_mounted("/vendor"), unmount("/vendor"));
ifelse(is_mounted("/product"), unmount("/product"));
run_program("/cache/tools/fresh-tk", "install_cleanup");
delete_recursive("/cache/tools");
delete("/tmp/build.prop");
delete("/tmp/fresh.prop");
delete("/tmp/fresh_core.prop");
ui_print(" ");
show_progress(1.000000, 0);
ui_print("- Installation complete!");
sleep(3);
ui_print(" ");

# Finish installation
ui_print("=========================================");
ui_print("         _____              _            ");
ui_print("        |  ___| __ ___  ___| |__         ");
ui_print("        | |_ | '__/ _ \/ __| '_ \        ");
ui_print("        |  _|| | |  __/\__ \ | | |       ");
ui_print("        |_|  |_|  \___||___/_| |_|       ");
ui_print("                                         ");
ui_print("=========================================");
ui_print("       Fresh installed successfully.     ");
ui_print("                                         ");
ui_print("         Welcome to a no-frills          ");
ui_print("           Samsung Experience!           ");
ui_print("=========================================");
sleep(5);
ui_print(" ");
